// All the little mixins that will go into one BIG mixin. 
// Hey, might need them!

@mixin set-dimensions($width, $height, $parent-width, $bottom: false) {
	width: percentage($width/$parent-width);
	@if $bottom {
		padding-bottom: percentage($height/$parent-width);
	} @else {
		padding-top: percentage($height/$parent-width);		
		height: 0;
	}
}

@mixin set-width($width, $parent-width) {
	width: percentage($width/$parent-width);
}

@mixin set-position($sX, $sY, $parent-width, $parent-height) {
	left: percentage($sX/$parent-width);
	top: percentage($sY/$parent-height);
}

@mixin offsetLeft($offset, $parent-width) {
	left: percentage($offset/$parent-width);
}

@mixin set-bg-width($sprites-width, $sprite, $sprite-image) {
	$spriteX: percentage($sprites-width / image-width(sprite-file($sprite, $sprite-image)));
	@include background-size($spriteX auto);
}

@mixin set-bg-height($sprites-height, $sprite, $sprite-image) {
	$spriteY: percentage($sprites-height / image-height(sprite-file($sprite, $sprite-image)));
	@include background-size(auto $spriteY);
}

@mixin create-prop($prop, $sX, $sY, $parent-width: $house-width, $parent-height: $frame-height*2) {
	.#{$prop}-prop {
		$iWidth: image-width(sprite-file($props-sprites, #{$prop}));
		$iHeight: image-height(sprite-file($props-sprites, #{$prop}));
		@include props-sprite(#{$prop});
	  @include set-dimensions($iWidth, $iHeight, $parent-width);
	  @include set-position($sX, $sY, $parent-width, $parent-height);
	  @include set-bg-width($props-sprite-width, $props-sprites, #{$prop});
	}
}

// The BIG mixin that generates styles for both the droppable "dirty" item
// and the "clean" place where it belongs
@mixin create-item($item, $sX, $sY, $placeX, $placeY, $parent-width: $house-width, $parent-height: $frame-height*2) {

	// Check for existence of ITEM-place sprite. Make .ITEM-place bg rules in that event.
	.messy .#{$item} {
		$thisItem: "items/#{$item}.png";
		$iWidth: image-width($thisItem);
		$iHeight: image-height($thisItem);
	  @include set-dimensions($iWidth, $iHeight, $parent-width);
	  @include set-position($sX, $sY, $parent-width, $parent-height);
	}

    .places .#{$item} {
        // If there's a background image for this already...
        @if index(sprite-names($places-sprites), #{$item}-place) {
                @include places-sprite(#{$item}-place);
        }
        $iWidth: image-width(sprite-file($places-sprites, #{$item}-hover));
        $iHeight: image-height(sprite-file($places-sprites, #{$item}-hover));
      @include set-dimensions($iWidth, $iHeight, $parent-width);
      @include set-position($placeX, $placeY, $parent-width, $parent-height);
      @include set-bg-width($places-sprite-width, $places-sprites, #{$item}-hover);
    }

    .#{$item}.droppable {
      @include places-sprite(#{$item}-droppable);
    }

    .#{$item}.hover         {
      @include places-sprite(#{$item}-hover);
    }

    .#{$item}.clean {
      @include places-sprite(#{$item}-clean);
    }
}

// For the hidden letters
@mixin create-letter($letter, $sX, $sY, $placeX, $placeY: 0px, $parent-width: $house-width, $parent-height: $frame-height*2) {

	.messy .#{$letter} {
		$thisLetter: "letters/#{$letter}-hidden.png";
		$lWidth: image-width($thisLetter);
		$lHeight: image-height($thisLetter);
	  @include letters-sprite(#{$letter}-hidden); 
	  @include set-dimensions($lWidth, $lHeight, $parent-width);
	  @include set-position($sX, $sY, $parent-width, $parent-height);
	  @include set-bg-width($letters-sprite-width, $letters-sprites, #{$letter}-hidden);
	}

	.letters-to-read .#{$letter} {
		$lWidth: image-width(sprite-file($letters-sprites, #{$letter}));
		$lHeight: image-height(sprite-file($letters-sprites, #{$letter}));
	  @include letters-sprite(#{$letter});
	  @include set-dimensions($lWidth, $lHeight, $parent-width);
	  @include set-position($placeX, $placeY, $parent-width, $parent-height);
	  @include set-bg-width($letters-sprite-width, $letters-sprites, #{$letter});
	}
}

// The photo scraps
@mixin create-photoScrap($photoNumber, $bX, $bY, $scrapNumber, $sX, $sY, $parent-width: $house-width, $parent-height: $frame-height*2) {
	// In the messy list
	.photo#{$photoNumber}-scrap#{$scrapNumber} {
		$thisSmallScrap: "photos/photo#{$photoNumber}-scrap#{$scrapNumber}-small.png";
		$thisSmallScrapName: "photo#{$photoNumber}-scrap#{$scrapNumber}-small";
		$sWidth: image-width($thisSmallScrap);
		$sHeight: image-height($thisSmallScrap);
	  @include photos-sprite($thisSmallScrapName); 
	  @include set-dimensions($sWidth, $sHeight, $parent-width);
	  @include set-position($sX, $sY, $parent-width, $parent-height);
	  @include set-bg-width($photos-sprite-width, $photos-sprites, $thisSmallScrapName);
	}
	// inside the .torn-photos
	.photo#{$photoNumber} .scrap#{$scrapNumber} {
		$thisBigScrap: "photos/photo#{$photoNumber}-scrap#{$scrapNumber}-big.png";
		$thisBigScrapName: "photo#{$photoNumber}-scrap#{$scrapNumber}-big";
		$bWidth: image-width($thisBigScrap);
		$bHeight: image-height($thisBigScrap);
	  @include photos-sprite($thisBigScrapName); 
	  @include set-dimensions($bWidth, $bHeight, $parent-width);
	  @include set-position($bX, $bY, $parent-width, $parent-height);
	  @include set-bg-width($photos-sprite-width, $photos-sprites, $thisBigScrapName);
	}
}

@mixin create-dialog($prefix, $number) {
	#dialog-#{$prefix}[data-dialog="#{$number}"] {
		@include dialog-sprite(#{$prefix}talk#{$number}); 
		@include set-dimensions(image-width(sprite-file($dialog-sprites, #{$prefix}talk#{$number})), $instructions-height, $ui-width);
		@include set-bg-width($dialog-sprite-width, $dialog-sprite, #{$prefix}talk#{$number});
	}
}